import pandas as pd
import numpy as np
import spacy
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load drug data from CSV at module level
try:
    df = pd.read_csv("Dataset/medicine_dataset.csv/medicine_dataset.csv", low_memory=False)
    side_effect_cols = [col for col in df.columns if col.startswith('sideEffect')]
    use_cols = [col for col in df.columns if col.startswith('use')]
    substitute_cols = [col for col in df.columns if col.startswith('substitute')]

    data = {}
    for _, row in df.iterrows():
        name = row['name']
        uses = [str(row[col]) for col in use_cols if pd.notna(row[col]) and str(row[col]).strip()]
        side_effects = [str(row[col]) for col in side_effect_cols if pd.notna(row[col]) and str(row[col]).strip()]
        substitutes = [str(row[col]) for col in substitute_cols if pd.notna(row[col]) and str(row[col]).strip()]
        data[name] = {
            "Medicine_name": name,
            "Uses": uses,  # list
            "Side_effects": side_effects,  # list
            "Substitutes": substitutes,  # list
            "Chemical Class": row.get("Chemical Class", ""),
            "Habit Forming": row.get("Habit Forming", ""),
            "Therapeutic Class": row.get("Therapeutic Class", ""),
            "Action Class": row.get("Action Class", "")
        }
    ALL_KEYS = list(data.keys())
    if not ALL_KEYS:
        print("Warning: medicine_dataset.csv loaded but contains no keys.")
except FileNotFoundError:
    print("Error: medicine_dataset.csv not found. NLP functions requiring it will fail.")
    data = {}
    ALL_KEYS = []

# Load the spaCy model once when the module is imported
try:
    nlp_model = spacy.load("en_core_med7_lg")
except OSError:
    print("Warning: spaCy model 'en_core_med7_lg' not found. Please download it: python -m spacy download en_core_med7_lg")
    nlp_model = None

def get_drugs(label: str):
    if not nlp_model:
        print("Warning: spaCy model not loaded. get_drugs will return empty string.")
        return ""
    if not label or not label.strip():
        return ""
    doc = nlp_model(label)
    drug_names = [ent.text for ent in doc.ents if ent.label_ == "DRUG"]
    return " ".join(drug_names).strip()

def cosine(drug_names_query: str):
    if not drug_names_query:
        return None
    if not ALL_KEYS:
        print("Error: No drug keys loaded from medicine_dataset.csv to compare against.")
        return None
    all_documents = ALL_KEYS + [drug_names_query]
    vectorizer = CountVectorizer(analyzer='char_wb', ngram_range=(2, 4))
    try:
        X = vectorizer.fit_transform(all_documents)
    except ValueError:
        print(f"DEBUG Cosine: Vectorizer failed for query: '{drug_names_query}'.")
        return None
    if X.shape[0] < 2:
        print(f"DEBUG Cosine: Not enough documents to compare. Query: '{drug_names_query}'")
        return None
    similarities = cosine_similarity(X[-1], X[:-1]).flatten()
    if len(similarities) == 0:
        print(f"DEBUG Cosine: Similarities array is empty. Query: '{drug_names_query}'")
        return None
    best_match_idx = np.argmax(similarities)
    highest_similarity = similarities[best_match_idx]
    print(f"DEBUG Cosine: Input query: '{drug_names_query}'")
    print(f"DEBUG Cosine: Best match in dataset: '{ALL_KEYS[best_match_idx]}'")
    print(f"DEBUG Cosine: Similarity score: {highest_similarity:.4f}")
    SIMILARITY_THRESHOLD = 0.5
    if highest_similarity >= SIMILARITY_THRESHOLD:
        return ALL_KEYS[best_match_idx]
    else:
        print(f"DEBUG Cosine: Similarity {highest_similarity:.4f} is below threshold {SIMILARITY_THRESHOLD}.")
        return None

def get_result(drug_key: str):
    if drug_key not in data:
        print(f"Warning: Drug key '{drug_key}' not found in data.")
        return {}
    return data[drug_key]

if __name__ == "__main__":
    print(
        get_result(
            cosine(
                get_drugs(
                    "30 capsules Cipla Rx Formotero Fumarate and Budesonide Powder For Inhalation IP foracort rotacaps 200"
                )
            )
        )
    )